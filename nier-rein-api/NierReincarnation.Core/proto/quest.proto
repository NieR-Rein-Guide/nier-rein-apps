syntax = "proto3";

option csharp_namespace = "Art.Framework.ApiNetwork.Grpc.Api.Quest";

import "proto/data.proto";

package apb.api.quest;

service QuestService {
	rpc StartEventQuest (StartEventQuestRequest) returns (StartEventQuestResponse);
	rpc StartMainQuest (StartMainQuestRequest) returns (StartMainQuestResponse);
	rpc StartExtraQuest (StartExtraQuestRequest) returns (StartExtraQuestResponse);
	rpc FinishEventQuest (FinishEventQuestRequest) returns (FinishEventQuestResponse);
	rpc FinishMainQuest (FinishMainQuestRequest) returns (FinishMainQuestResponse);
	rpc FinishExtraQuest (FinishExtraQuestRequest) returns (FinishExtraQuestResponse);
	rpc UpdateEventQuestSceneProgress (UpdateEventQuestSceneProgressRequest) returns (UpdateEventQuestSceneProgressResponse);
	rpc UpdateMainQuestSceneProgress (UpdateMainQuestSceneProgressRequest) returns (UpdateMainQuestSceneProgressResponse);
	rpc UpdateMainFlowSceneProgress (UpdateMainFlowSceneProgressRequest) returns (UpdateMainFlowSceneProgressResponse);
}

message StartEventQuestRequest {
	int32 eventQuestChapterId = 1;
	int32 questId = 2;
	int32 userDeckNumber = 3;
	bool isBattleOnly = 4;
	int32 maxAutoOrbitCount = 5;
}

message StartEventQuestResponse {
	repeated BattleDropReward battleDropReward = 1;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message StartMainQuestRequest {
	int32 questId = 1;
	bool isMainFlow = 2;
	int32 userDeckNumber = 3;
	bool isBattleOnly = 4;
	int32 maxAutoOrbitCount = 5;
	bool isReplayFlow = 6;
	CageMeasurableValues cageMeasurableValues = 50;
}

message StartMainQuestResponse {
	repeated BattleDropReward BattleDropReward = 1;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message StartExtraQuestRequest {
	int32 questId = 1;
	int32 userDeckNumber = 2;
}

message StartExtraQuestResponse {
	repeated BattleDropReward BattleDropReward = 1;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message FinishEventQuestRequest {
	int32 eventQuestChapterId = 1;
	int32 questId = 2;
	bool isRetired = 3;
	bool isAnnihilated = 4;
	bool isAutoOrbit = 5;
	int32 storySkipType = 6;
	string vt = 200;
}

message FinishEventQuestResponse {
	repeated QuestReward dropReward = 1;
	repeated QuestReward firstClearReward = 2;
	repeated QuestReward missionClearReward = 3;
	repeated QuestReward missionClearCompleteReward = 4;
	repeated QuestReward autoOrbitResult = 5;
	bool isBigWin = 6;
	repeated int32 bigWinClearedQuestMissionIdList = 7;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message FinishMainQuestRequest {
	int32 questId = 1;
	bool isRetired = 2;
	bool isMainFlow = 3;
	bool isAnnihilated = 4;
	bool isAutoOrbit = 5;
	int32 storySkipType = 6;
	bool isReplayFlow = 7;
	string vt = 200;
}

message FinishMainQuestResponse {
	repeated QuestReward dropReward = 1;
	repeated QuestReward firstClearReward = 2;
	repeated QuestReward missionClearReward = 3;
	repeated QuestReward missionClearCompleteReward = 4;
	repeated QuestReward autoOrbitResult = 5;
	bool isBigWin = 6;
	repeated int32 bigWinClearedQuestMissionIdList = 7;
	repeated QuestReward replayFlowFirstClearReward = 8;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message FinishExtraQuestRequest {
	int32 questId = 1;
	bool isRetired = 2;
	bool isAnnihilated = 3;
	int32 storySkipType = 4;
	string vt = 200;
}

message FinishExtraQuestResponse {
	repeated QuestReward dropReward = 1;
	repeated QuestReward firstClearReward = 2;
	repeated QuestReward missionClearReward = 3;
	repeated QuestReward missionClearCompleteReward = 4;
	bool isBigWin = 5;
	repeated int32 bigWinClearedQuestMissionIdList = 6;
	repeated QuestReward userStatusCampaignReward = 7;
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message UpdateEventQuestSceneProgressRequest {
	int32 questSceneId = 1;
}

message UpdateEventQuestSceneProgressResponse {
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message UpdateMainQuestSceneProgressRequest {
	int32 questSceneId = 1;
}

message UpdateMainQuestSceneProgressResponse {
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message UpdateMainFlowSceneProgressRequest {
	int32 questSceneId = 1;
}

message UpdateMainFlowSceneProgressResponse {
	map<string,apb.api.data.DiffData> diffUserData = 99;
}

message BattleDropReward {
	int32 questSceneId = 1;
	int32 battleDropCategoryId = 2;
	int32 battleDropEffectId = 3;
}

message QuestReward {
	int32 possessionType = 1;
	int32 possessionId = 2;
	int32 count = 3;
	int32 rewardEffectId = 4;
	bool isAutoSale = 5;
	bytes equipmentData = 6;
	QuestReward.EquipmentDataOneofCase equipmentDataCase = 7;

	enum EquipmentDataOneofCase {
		None = 0;
		Parts = 6;
	}
}

message CageMeasurableValues {
	int32 runningDistanceMeters = 1;
	int32 mamaTappedCount = 2;
}
